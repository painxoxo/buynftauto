import requests
import time

# Set your wallet address here
WALLET_ADDRESS = ''

# Set the collection contract address and token ID range
CONTRACT_ADDRESS = '0xe4605d46fd0b3f8329d936a8b258d69276cba264'
TOKEN_ID_RANGE = range(1, 101)

# Set the maximum price you are willing to pay in ETH
MAX_PRICE = 0.1

# Set the delay (in seconds) between API requests
DELAY = 5

# Set the minimum acceptable floor price as a percentage of the lowest listed price
MIN_FLOOR_PRICE_PERCENT = 80

# Set the number of retries for API requests in case of errors
NUM_RETRIES = 3

# Set the retry delay (in seconds) between retries
RETRY_DELAY = 5


def get_lowest_price(nft):
    """Returns the lowest listed price of an NFT, or None if the NFT is not listed."""
    try:
        response = requests.get(f'https://api.opensea.io/api/v1/assets?order_direction=asc&offset=0&limit=1&asset_contract_address={nft["contract"]}&token_ids={nft["token_id"]}')
        response.raise_for_status()
        data = response.json()
        if data['assets'] and 'current_price' in data['assets'][0]:
            return float(data['assets'][0]['current_price']) / 10**data['assets'][0]['payment_token']['decimals']
        else:
            return None
    except (requests.exceptions.RequestException, ValueError):
        return None


def is_floor_price_acceptable(nft):
    """Returns True if the floor price of an NFT is acceptable, False otherwise."""
    lowest_price = get_lowest_price(nft)
    if lowest_price is None:
        return False
    else:
        floor_price = lowest_price * MIN_FLOOR_PRICE_PERCENT / 100
        return floor_price <= MAX_PRICE


def buy_nft(nft):
    """Buys an NFT."""
    try:
        response = requests.post(f'https://api.opensea.io/wyvern/v1/orders', json={
            'maker': nft['seller'],
            'taker': WALLET_ADDRESS,
            'maker_fee': '0',
            'taker_fee': '0',
            'fee_recipient': '0x0000000000000000000000000000000000000000',
            'payment_token': {
                'address': nft['payment_token'],
                'decimals': nft['payment_token_decimals']
            },
            'quantity': 1,
            'price': str(nft['current_price']),
            'expiration_time': int(time.time()) + 60 * 60 * 24 * 7,  # Set the order expiration time to one week from now
            'v': 27,
            'r': '0x' + '0' * 64,
            's': '0x' + '0' * 64
        })
        response.raise_for_status()
    except (requests.exceptions.RequestException, ValueError):
        return False
    else:
        return True


def main():
    for token_id in TOKEN_ID_RANGE:
        nft = {'contract': CONTRACT_ADDRESS, 'token_id': token_id}
        for i in range(NUM_RETRIES):
            try:
                response = requests.get(f'https://api.opensea.io/api/v1/asset/{nft["contract"]}/{nft["token_id"]}')
                response.raise_for_status()
